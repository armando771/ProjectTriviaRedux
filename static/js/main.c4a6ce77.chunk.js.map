{"version":3,"sources":["redux/actions/index.js","components/SettingsButton.js","pages/Login.js","pages/Settings.js","components/Header.js","components/Timer.js","components/UniqueButton.js","components/Button.js","components/QuestionInfo.js","components/Question.js","pages/Game.js","pages/Feedback.js","pages/Ranking.js","App.js","serviceWorker.js","redux/reducers/player.js","redux/reducers/userInfo.js","redux/reducers/questions.js","redux/reducers/index.js","redux/store/index.js","index.js"],"names":["REQUEST_TOKEN","REQUEST_TOKEN_SUCCESS","REQUEST_TOKEN_ERROR","REQUEST_QUESTIONS","REQUEST_QUESTIONS_SUCCESS","REQUEST_QUESTIONS_ERROR","requestTokenError","error","type","payload","requestQuestionsSuccess","value","USERINFOS","Settings","to","React","Component","Login","props","state","email","name","disable","handleChange","bind","validateLogin","getToken","this","getDataFromApi","userInfo","userNameEmail","localStorage","setItem","token","JSON","stringify","player","gravatarEmail","score","assertions","target","setState","test","length","className","htmlFor","id","onChange","disabled","onClick","setPlayerData","SettingsButton","connect","userReducer","info","dispatch","data","a","fetch","tokenRequest","json","tokeJSON","QUESTION_URL","questionsRequest","questionsJSON","results","Header","parse","getItem","src","md5","toString","alt","userInfosReducer","Timer","seconds","count","interval","setInterval","clearInterval","UniqueButton","innerText","defaultProps","Button","key","dataTestId","QuestionInfo","index","changeColorsAnswer","changeButtonVisibility","changeQuestions","resetQuestions","document","getElementsByClassName","classList","add","correct","getElementById","getElementsByName","forEach","question","p","remove","timer","questions","points","difficulty","difficultyMultiplier","locals","replace","category","renderQuestions","sumUserPoints","correct_answer","incorrect_answers","map","incorrect","i","Question","questionsReducer","Game","FeedBack","playAgain","goToRanking","newRanking","playerImage","ranking","history","push","feedBackMessage","Ranking","sort","b","rank","App","exact","path","component","Boolean","window","location","hostname","match","INITIAL_STATE","isFetching","action","isFething","user","emial","console","log","rootReducer","combineReducers","store","createStore","composeWithDevTools","applyMiddleware","thunk","Cypress","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8dAAaA,EAAgB,gBAChBC,EAAwB,wBACxBC,EAAsB,sBACtBC,EAAoB,oBACpBC,EAA4B,4BAC5BC,EAA0B,0BAU1BC,EAAoB,SAACC,GAAD,MAAY,CAC3CC,KAAMN,EAAqBO,QAASF,IAOzBG,EAA0B,SAACC,GAAD,MAAY,CACjDH,KAAMJ,EAA2BK,QAASE,IA8B/BC,EAAY,Y,OCnDnBC,E,4JACJ,WACE,OACE,cAAC,IAAD,CAAMC,GAAG,YAAT,SACE,wBACE,cAAY,eACZN,KAAK,SAFP,uC,GAJeO,IAAMC,WAedH,ICVTI,G,wDACJ,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACXC,MAAO,GACPC,KAAM,GACNC,SAAS,GAGX,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,cAAgB,EAAKA,cAAcD,KAAnB,gBACrB,EAAKE,SAAW,EAAKA,SAASF,KAAd,gBAVC,E,4CAanB,WACE,MAAoDG,KAAKT,MAAjDU,EAAR,EAAQA,eAAgBC,EAAxB,EAAwBA,SAAUC,EAAlC,EAAkCA,cAClC,EAAwBH,KAAKR,MAArBE,EAAR,EAAQA,KAAMD,EAAd,EAAcA,MACdQ,IACAE,EAAcT,EAAMD,GACpBW,aAAaC,QAAQ,QAASH,EAASI,S,2BAGzC,WACE,MAAwBN,KAAKR,MAArBE,EAAR,EAAQA,KAAMD,EAAd,EAAcA,MACdW,aAAaC,QAAQ,QACnBE,KAAKC,UAAU,CACbC,OAAQ,CAAEf,OAAMgB,cAAejB,EAAOkB,MAAO,EAAGC,WAAY,Q,0BAGlE,YAA2C,IAAD,WAA3BC,OAAUnB,EAAiB,EAAjBA,KAAMV,EAAW,EAAXA,MAC7BgB,KAAKc,SAAL,eAAiBpB,EAAOV,IAAS,kBAAM,EAAKc,qB,2BAG9C,WACE,MAAwBE,KAAKR,MAArBC,EAAR,EAAQA,MAAOC,EAAf,EAAeA,KAGTC,IAFa,gBAEUoB,KAAKtB,IAAUC,EAAKsB,OAD9B,GAEnBhB,KAAKc,SAAS,CAAEnB,c,oBAGlB,WAAU,IAAD,OACP,EAAiCK,KAAKR,MAA9BC,EAAR,EAAQA,MAAOC,EAAf,EAAeA,KAAMC,EAArB,EAAqBA,QACrB,OACE,sBAAKsB,UAAU,kBAAf,UACE,2CACA,iCACE,wBAAOC,QAAQ,oBAAf,kBAEE,uBACE,cAAY,oBACZC,GAAG,oBACHtC,KAAK,OACLa,KAAK,OACLV,MAAQU,EACR0B,SAAWpB,KAAKJ,kBAGpB,wBAAOsB,QAAQ,uBAAf,oBAEE,uBACE,cAAY,uBACZC,GAAG,uBACHtC,KAAK,OACLa,KAAK,QACLV,MAAQS,EACR2B,SAAWpB,KAAKJ,kBAGpB,cAAC,IAAD,CAAMT,GAAG,QAAT,SACE,wBACE,cAAY,WACZN,KAAK,SACLwC,SAAW1B,EACX2B,QAAU,WACR,EAAKvB,WACL,EAAKwB,iBANT,qBAYF,cAACC,EAAD,c,GAlFUpC,IAAMC,YAwGXoC,eAVS,SAACjC,GAAD,MAAY,CAClCU,SAAUV,EAAMkC,YAAYC,SANH,SAACC,GAAD,MAAe,CACxC3B,eAAgB,SAAC4B,GAAD,OAAUD,EFhEF,uCAAM,WAAOA,GAAP,uBAAAE,EAAA,6DAC9BF,EA5BiC,CACjC/C,KAAMR,IA0BwB,kBAGD0D,MANb,qDAGc,cAGtBC,EAHsB,gBAILA,EAAaC,OAJR,cAItBC,EAJsB,OAK5BN,GA5BgC5C,EA4BHkD,EAAS5B,MA5BK,CAC7CzB,KAAMP,EAAuBQ,QAASE,KA4BpCoB,aAAaC,QAAQ,QAAS6B,EAAS5B,OACjC6B,EAPsB,qDAOuCD,EAAS5B,OAPhD,oBASKyB,MAAMI,GATX,eASpBC,EAToB,iBAUEA,EAAiBH,OAVnB,QAUpBI,EAVoB,OAW1BT,EAAS7C,EAAwBsD,EAAcC,UAXrB,mDAa1BV,GApBgChD,EAoBD,EAAD,GApBa,CAC/CC,KAAMH,EAAyBI,QAASF,KAMV,0DAgB5BgD,EAASjD,EAAkB,EAAD,KAhBE,kCAPK,IAACC,EAhBFI,IAuBJ,6BAAN,wDEiExBmB,cAAe,SAACwB,GAAD,OAAUC,EF5CqB,CAAE/C,KAAMI,EAAWS,KE4ChBiC,EF5CsBlC,UAA3C,IAAOA,MEyDtBgC,CAA6CnC,GC9GtDJ,E,4JACJ,WACE,OACE,oBAAI,cAAY,iBAAhB,6C,GAHiBE,IAAMC,WAQdH,I,iBCJTqD,G,kKACJ,WACE,MAAwBvC,KAAKT,MAArBE,EAAR,EAAQA,MAAOC,EAAf,EAAeA,KACGiB,EAAYJ,KAAKiC,MAAMpC,aAAaqC,QAAQ,UAAtDhC,OAAUE,MAClB,OACE,mCACE,qBACE+B,IAAG,0CAAsCC,IAAIlD,GAAOmD,YACpD,cAAY,yBACZC,IAAG,eAAWnD,KAEhB,qBAAI,cAAY,qBAAhB,UACE,sBAAMuB,UAAU,OAAhB,mBACEvB,KAEJ,uBAAM,cAAY,eAAeuB,UAAU,QAA3C,UACE,sBAAMA,UAAU,aAAhB,qBACCN,Y,GAjBUtB,cAkCNoC,eALS,SAACjC,GAAD,MAAY,CAClCC,MAAOD,EAAMsD,iBAAiBrD,MAC9BC,KAAMF,EAAMsD,iBAAiBpD,QAGS,KAAzB+B,CAA+Bc,GCO/BQ,G,wDA3Cb,WAAYxD,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACXwD,QAAS,IAEX,EAAKC,MAAQ,EAAKA,MAAMpD,KAAX,gBALI,E,qDAQnB,WACEG,KAAKiD,U,mBAGP,WAAS,IAAD,OAEAC,EAAWC,aAAY,WAC3B,IAAQH,EAAY,EAAKxD,MAAjBwD,QACR,EAAKlC,SAAS,CACZkC,QAASA,EAAU,IAEL,IAAZA,IACFI,cAAcF,GACd,EAAKpC,SAAS,CACZkC,QAAS,iBATH,O,oBAed,WACE,IAAQA,EAAYhD,KAAKR,MAAjBwD,QACR,OACE,sBAAK/B,UAAU,QAAf,UACE,sCACA,+BAEI+B,W,GApCQ3D,c,OCAdgE,E,4JACJ,WACE,MAAoDrD,KAAKT,MAAjD0B,EAAR,EAAQA,UAAWK,EAAnB,EAAmBA,QAASgC,EAA5B,EAA4BA,UAAWjC,EAAvC,EAAuCA,SACvC,OACE,wBACEJ,UAAYA,EACZI,SAAWA,EACXxC,KAAK,SACL,cAAcoC,EACdE,GAAKF,EACLK,QAAUA,EANZ,SAQIgC,Q,GAZiBjE,aAyB3BgE,EAAaE,aAAe,CAC1BlC,UAAU,GAGGgC,QC7BTG,E,4JACJ,WACE,MAA2DxD,KAAKT,MAAxD0B,EAAR,EAAQA,UAAWK,EAAnB,EAAmBA,QAASgC,EAA5B,EAA4BA,UAAWG,EAAvC,EAAuCA,IAAKC,EAA5C,EAA4CA,WAC5C,OACE,wBACEzC,UAAYA,EACZpC,KAAK,SAEL,cAAc6E,EACdhE,KAAOuB,EACPK,QAAUA,EANZ,SAQIgC,GALIG,O,GAPOpE,aA0BNmE,ICtBTG,G,wDACJ,WAAYpE,GAAQ,IAAD,8BACjB,cAAMA,IAEDC,MAAQ,CACXoE,MAAO,GAGT,EAAKC,mBAAqB,EAAKA,mBAAmBhE,KAAxB,gBAC1B,EAAKiE,uBAAyB,EAAKA,uBAAuBjE,KAA5B,gBAC9B,EAAKkE,gBAAkB,EAAKA,gBAAgBlE,KAArB,gBACvB,EAAKmE,eAAiB,EAAKA,eAAenE,KAApB,gBAVL,E,0DAanB,WAC6BoE,SAASC,uBAAuB,YAAY,GACpDC,UAAUC,IAAI,a,gCAGnC,WACE,IAAMC,EAAUJ,SAASK,eAAe,kBACtBL,SAASM,kBAAkB,oBACnCC,SAAQ,SAACC,GAAeA,EAASxD,WAAa,oBACxDoD,EAAQpD,WAAa,qB,6BAGvB,WACEjB,KAAKc,UAAS,SAAC4D,GAAD,MAAQ,CAAEd,MAAOc,EAAEd,MAAQ,Q,4BAG3C,WACE,IAAMS,EAAUJ,SAASK,eAAe,kBACtBL,SAASM,kBAAkB,oBACnCC,SAAQ,SAACC,GAAD,OAAcA,EAASN,UAAUQ,OAAO,oBAC1DN,EAAQF,UAAUQ,OAAO,qB,2BAG3B,WACE,IACA,EAA6B3E,KAAKT,MAA1BqF,EAAR,EAAQA,MAAOC,EAAf,EAAeA,UACPjB,EAAU5D,KAAKR,MAAfoE,MAaFkB,EAfa,GAeUF,EAZA,WAC3B,GAAoC,SAAhCC,EAAUjB,GAAOmB,WACnB,OAAO,EAET,GAAoC,WAAhCF,EAAUjB,GAAOmB,WACnB,OAAO,EAET,GAAoC,SAAhCF,EAAUjB,GAAOmB,WAAuB,CAE1C,OADuB,GAIUC,GAC/BC,EAAS1E,KAAKiC,MAAMpC,aAAaqC,QAAQ,UAC/CrC,aAAaC,QAAQ,QAASE,KAAKC,UAAU,CAC3CC,OAAO,2BACFwE,EAAOxE,QADN,IAEJG,WACAqE,EAAOxE,OAAOG,WAAa,EAC3BD,MAAOsE,EAAOxE,OAAOE,MAAQmE,S,6BAInC,WASE,OARsB9E,KAAKT,MAAnBsF,UACU7E,KAAKR,MAAfoE,OACAa,SAELS,QAAQ,WAAY,IACpBA,QAAQ,WAAY,IACpBA,QAAQ,YAAa,IACrBA,QAAQ,SAAU,M,oBAIvB,WAAU,IAAD,OACCtB,EAAU5D,KAAKR,MAAfoE,MACR,EAAgC5D,KAAKT,MAA7BsF,EAAR,EAAQA,UAAWxD,EAAnB,EAAmBA,SAEnB,OADsB,IAClBuC,EAAgC,cAAC,IAAD,CAAUzE,GAAG,cAE/C,sBAAK8B,UAAU,qBAAf,UACE,oBAAGA,UAAU,oBAAoB,cAAY,oBAA7C,UACE,sBAAMA,UAAU,WAAhB,uBADF,UAEM4D,EAAUjB,GAAOuB,aAEvB,oBAAG,cAAY,gBAAgBlE,UAAU,gBAAzC,UACE,sBAAMA,UAAU,WAAhB,uBADF,UAEMjB,KAAKoF,sBAEX,cAAC,EAAD,CACE/D,SAAWA,EACXJ,UAAU,iBACVK,QAAU,WACR,EAAKwC,yBACL,EAAKD,qBACL,EAAKwB,iBAEP/B,UAAYuB,EAAUjB,GAAO0B,iBAE9BT,EAAUjB,GAAO2B,kBAAkBC,KAAI,SAACC,EAAWC,GAAZ,OACtC,cAAC,EAAD,CACEzE,UAAU,mBAEVyC,WAAU,uBAAmBgC,GAC7BpE,QAAU,WACR,EAAKwC,yBACL,EAAKD,sBAEPP,UAAYmC,GANNC,MASV,cAAC,EAAD,CACEzE,UAAU,WACVqC,UAAU,aACVhC,QAAU,WACR,EAAKyC,kBACL,EAAKC,2B,GAtHU3E,cAoI3BsE,EAAaJ,aAAe,CAC1BlC,UAAU,GAGGsC,QCxITgC,G,wDACJ,aAAe,IAAD,8BACZ,gBAEKnG,MAAQ,CACXwD,QAAS,GACT3B,UAAU,GAGZ,EAAK4B,MAAQ,EAAKA,MAAMpD,KAAX,gBARD,E,qDAWd,WACEG,KAAKiD,U,mBAGP,WAAS,IAAD,OAEAC,EAAWC,aAAY,WAC3B,IAAQH,EAAY,EAAKxD,MAAjBwD,QACR,EAAKlC,SAAS,CACZkC,QAASA,EAAU,IAEL,IAAZA,IACFI,cAAcF,GACd,EAAKpC,SAAS,CACZkC,QAAS,YACT3B,UAAU,OAVJ,O,oBAgBd,WACE,MAA8BrB,KAAKR,MAA3B6B,EAAR,EAAQA,SAAU2B,EAAlB,EAAkBA,QACV6B,EAAc7E,KAAKT,MAAnBsF,UACR,OACE,sBAAK5D,UAAU,YAAf,UACE,cAAC,EAAD,IACG4D,EAAU7D,OAGT,cAAC,EAAD,CACE6D,UAAYA,EACZxD,SAAWA,EACXuD,MAAQ5B,EACRC,MAAQjD,KAAKiD,QANf,Y,GAxCW5D,cA8DRoC,eARS,SAACjC,GAAD,MAAY,CAClCqF,UAAWrF,EAAMoG,iBAAiBf,aAOrBpD,CAAyBkE,GCjElCE,E,4JACJ,WACE,OACE,gCACE,cAAC,EAAD,IACA,cAAC,EAAD,W,GALWxG,aAWJwG,I,QCsFAC,G,wDA/Fb,aAAe,IAAD,8BACZ,gBACKC,UAAY,EAAKA,UAAUlG,KAAf,gBACjB,EAAKmG,YAAc,EAAKA,YAAYnG,KAAjB,gBAHP,E,qDAMd,WACE,MAA2CU,KAAKiC,MAAMpC,aAAaqC,QAAQ,UAAnEhC,OAAUf,EAAlB,EAAkBA,KAAMD,EAAxB,EAAwBA,MAAOkB,EAA/B,EAA+BA,MAGzBsF,EAAa,CACjBC,YAHe,0CAAsCvD,IAAIlD,GAAOmD,YAIhEjC,QACAjB,QAGIyG,EAAU5F,KAAKiC,MAAMpC,aAAaqC,QAAQ,YAE5C0D,EACF/F,aACGC,QAAQ,UACPE,KAAKC,UAAL,sBAAmB2F,GAAnB,CAA4BF,MAEhC7F,aAAaC,QAAQ,UAAWE,KAAKC,UAAU,CAACyF,O,uBAIpD,WACsBjG,KAAKT,MAAjB6G,QACAC,KAAK,yB,6BAGf,WAGE,OAFmC9F,KAAKiC,MAAMpC,aAAaqC,QAAQ,UAA3DhC,OAAUG,WACI,EACc,sBAAwB,gB,yBAG9D,WACsBZ,KAAKT,MAAjB6G,QACAC,KAAK,c,oBAGf,WACE,MAOQ9F,KAAKiC,MAAMpC,aAAaqC,QAAQ,UANtChC,OAEEf,EAHJ,EAGIA,KACAkB,EAJJ,EAIIA,WACAF,EALJ,EAKIA,cACAC,EANJ,EAMIA,MAEJ,OACE,sBAAKM,UAAU,qBAAf,UACE,mCACE,qBACEyB,IAAG,0CAAsCC,IAAIjC,GAAekC,YAC5D,cAAY,yBACZC,IAAG,eAAWnD,KAEhB,qBAAI,cAAY,qBAAhB,UACE,sBAAMuB,UAAU,SAAhB,sBACCvB,KAEH,mBAAGuB,UAAU,cAAc,cAAY,eAAvC,SAAuDN,OAEzD,sBAAKM,UAAU,UAAf,UACE,4CACA,oBAAGA,UAAU,aAAb,kCAEE,sBAAM,cAAY,0BAAlB,SAA6CL,OAE/C,oBAAGK,UAAU,SAAb,6BAEE,sBAAM,cAAY,uBAAlB,SAA0CN,OAE5C,mBAAG,cAAY,gBAAf,SAAgCX,KAAKsG,oBACrC,sBAAKrF,UAAU,oBAAf,UACE,wBAAQpC,KAAK,SAAS,cAAY,iBAAiByC,QAAUtB,KAAK+F,UAAlE,6BAGA,wBAAQlH,KAAK,SAAS,cAAY,cAAcyC,QAAUtB,KAAKgG,YAA/D,sC,GAlFW5G,IAAMC,YCgDdkH,G,wDAhDb,aAAe,IAAD,8BACZ,gBACKR,UAAY,EAAKA,UAAUlG,KAAf,gBAFL,E,6CAKd,WACsBG,KAAKT,MAAjB6G,QACAC,KAAK,yB,oBAGf,WACE,IAAMF,EAAU5F,KAAKiC,MAAMpC,aAAaqC,QAAQ,YAEhD,OACE,sBAAKxB,UAAU,UAAf,UACE,mBAAGA,UAAU,QAAQ,cAAY,gBAAjC,qBAGA,qBAAKA,UAAU,oBAAf,SACGkF,EACEK,MAAK,SAAC1E,EAAG2E,GAAJ,OAAUA,EAAE9F,MAAQmB,EAAEnB,SAC3B6E,KAAI,SAACkB,EAAM9C,GAAP,OACH,sBAAK3C,UAAU,UAAf,UACE,qBAAKyB,IAAMgE,EAAKR,YAAcrD,IAAI,WAClC,oBAAI,oCAA6Be,GAAjC,SAA4C8C,EAAKhH,OACjD,oBAAG,sCAA+BkE,GAAlC,6BAEE,sBAAM3C,UAAU,QAAhB,SAAyByF,EAAK/F,aALHiD,QAUrC,wBACE/E,KAAK,SACL,cAAY,cACZyC,QAAUtB,KAAK+F,UAHjB,qC,GAjCc3G,IAAMC,YCKb,SAASsH,KACtB,OACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,sBAAsBC,UAAYxH,IACpD,cAAC,IAAD,CAAOsH,OAAK,EAACC,KAAK,YAAYC,UAAY5H,IAC1C,cAAC,IAAD,CAAO0H,OAAK,EAACC,KAAK,QAAQC,UAAYjB,IACtC,cAAC,IAAD,CAAOe,OAAK,EAACC,KAAK,YAAYC,UAAYhB,IAC1C,cAAC,IAAD,CAAOc,OAAK,EAACC,KAAK,WAAWC,UAAYP,OCJ3BQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,+BCZAC,GAAgB,CACpBzF,KAAM,GACN0F,YAAY,EACZzI,MAAO,IA2BM8C,GAxBK,WAAoC,IAAnClC,EAAkC,uDAA1B4H,GAAeE,EAAW,uCACrD,OAAQA,EAAOzI,MACf,KAAKR,EACH,OAAO,2BACFmB,GADL,IAEE6H,YAAY,IAEhB,KAAK/I,EACH,OAAO,2BACFkB,GADL,IAEEmC,KAAM2F,EAAOxI,QACbyI,WAAW,IAEf,KAAKhJ,EACH,OAAO,2BACFiB,GADL,IAEEZ,MAAO0I,EAAOxI,QACduI,YAAY,IAEhB,QACE,OAAO7H,IC9BL4H,GAAgB,CACpBI,KAAM,CACJ9H,KAAM,GACND,MAAO,KAYIqD,GARU,WAAoC,IAAnCtD,EAAkC,uDAA1B4H,GAAeE,EAAW,uCAC1D,OAAQA,EAAOzI,OACVI,EACI,2BAAKO,GAAZ,IAAmBE,KAAM4H,EAAO5H,KAAM+H,MAAOH,EAAO7H,QACtCD,GCPZ4H,GAAgB,CACpBvC,UAAW,GACXwC,YAAY,EACZzI,MAAO,IA4BMgH,GAzBU,WAAoC,IAAnCpG,EAAkC,uDAA1B4H,GAAeE,EAAW,uCAE1D,OADAI,QAAQC,IAAIL,GACJA,EAAOzI,MACf,KAAKL,EACH,OAAO,2BACFgB,GADL,IAEE6H,YAAY,IAEhB,KAAK5I,EACH,OAAO,2BACFe,GADL,IAEEqF,UAAWyC,EAAOxI,QAClBuI,YAAY,IAEhB,KAAK3I,EACH,OAAO,2BACFc,GADL,IAEE6H,YAAY,EACZzI,MAAO0I,EAAOxI,UAElB,QACE,OAAOU,IC1BIoI,GAFKC,2BAAgB,CAAEnG,eAAaoB,oBAAkB8C,sBCA/DkC,GAAQC,uBAAYH,GAAaI,+BAAoBC,2BAAgBC,QAE5DJ,MAEXd,OAAOmB,UACTnB,OAAOc,MAAQA,ICDjBM,IAASC,OACP,cAAC,IAAD,CAAUP,MAAQA,GAAlB,SACE,cAAC,IAAD,UACE,cAAC,GAAD,QAGJ7D,SAASK,eAAe,SNoHpB,kBAAmBgE,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.c4a6ce77.chunk.js","sourcesContent":["export const REQUEST_TOKEN = 'REQUEST_TOKEN';\nexport const REQUEST_TOKEN_SUCCESS = 'REQUEST_TOKEN_SUCCESS';\nexport const REQUEST_TOKEN_ERROR = 'REQUEST_TOKEN_ERROR';\nexport const REQUEST_QUESTIONS = 'REQUEST_QUESTIONS';\nexport const REQUEST_QUESTIONS_SUCCESS = 'REQUEST_QUESTIONS_SUCCESS';\nexport const REQUEST_QUESTIONS_ERROR = 'REQUEST_QUESTIONS_ERROR';\n\nexport const requestToken = () => ({\n  type: REQUEST_TOKEN,\n});\n\nexport const requestTokenSuccess = (value) => ({\n  type: REQUEST_TOKEN_SUCCESS, payload: value,\n});\n\nexport const requestTokenError = (error) => ({\n  type: REQUEST_TOKEN_ERROR, payload: error,\n});\n\nexport const requestQuestions = () => ({\n  type: REQUEST_QUESTIONS,\n});\n\nexport const requestQuestionsSuccess = (value) => ({\n  type: REQUEST_QUESTIONS_SUCCESS, payload: value,\n});\n\nexport const requestQuestionsError = (error) => ({\n  type: REQUEST_QUESTIONS_ERROR, payload: error,\n});\n\nconst END_POINT = 'https://opentdb.com/api_token.php?command=request';\n\n// Solução proposta pelo Rodrigo Merlone - Turma 12\nexport const fetchToken = () => async (dispatch) => {\n  dispatch(requestToken());\n  try {\n    const tokenRequest = await fetch(END_POINT);\n    const tokeJSON = await tokenRequest.json();\n    dispatch(requestTokenSuccess(tokeJSON.token));\n    localStorage.setItem('token', tokeJSON.token);\n    const QUESTION_URL = `https://opentdb.com/api.php?amount=5&token=${tokeJSON.token}`;\n    try {\n      const questionsRequest = await fetch(QUESTION_URL);\n      const questionsJSON = await questionsRequest.json();\n      dispatch(requestQuestionsSuccess(questionsJSON.results));\n    } catch (e) {\n      dispatch(requestQuestionsError(e));\n    }\n  } catch (e) {\n    dispatch(requestTokenError(e));\n  }\n};\n\nexport const USERINFOS = 'USERINFOS';\nexport const actionUserInfo = (name, email) => ({ type: USERINFOS, name, email });\n","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nclass Settings extends React.Component {\n  render() {\n    return (\n      <Link to=\"/settings\">\n        <button\n          data-testid=\"btn-settings\"\n          type=\"button\"\n        >\n          Configurações\n        </button>\n      </Link>\n    );\n  }\n}\n\nexport default Settings;\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\nimport { fetchToken, actionUserInfo } from '../redux/actions';\nimport SettingsButton from '../components/SettingsButton';\nimport './login.css';\n\nclass Login extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      email: '',\n      name: '',\n      disable: true,\n    };\n\n    this.handleChange = this.handleChange.bind(this);\n    this.validateLogin = this.validateLogin.bind(this);\n    this.getToken = this.getToken.bind(this);\n  }\n\n  getToken() {\n    const { getDataFromApi, userInfo, userNameEmail } = this.props;\n    const { name, email } = this.state;\n    getDataFromApi();\n    userNameEmail(name, email);\n    localStorage.setItem('token', userInfo.token);\n  }\n\n  setPlayerData() {\n    const { name, email } = this.state;\n    localStorage.setItem('state',\n      JSON.stringify({\n        player: { name, gravatarEmail: email, score: 0, assertions: 0 } }));\n  }\n\n  handleChange({ target: { name, value } }) {\n    this.setState({ [name]: value }, () => this.validateLogin());\n  }\n\n  validateLogin() {\n    const { email, name } = this.state;\n    const checkEmail = /(.*)@(.*).com/;\n    const nameLength = 5;\n    const disable = !(checkEmail.test(email) && name.length > nameLength);\n    this.setState({ disable });\n  }\n\n  render() {\n    const { email, name, disable } = this.state;\n    return (\n      <div className=\"login-container\">\n        <h2>Trívia</h2>\n        <form>\n          <label htmlFor=\"input-player-name\">\n            Nome:\n            <input\n              data-testid=\"input-player-name\"\n              id=\"input-player-name\"\n              type=\"text\"\n              name=\"name\"\n              value={ name }\n              onChange={ this.handleChange }\n            />\n          </label>\n          <label htmlFor=\"input-gravatar-email\">\n            E-mail:\n            <input\n              data-testid=\"input-gravatar-email\"\n              id=\"input-gravatar-email\"\n              type=\"text\"\n              name=\"email\"\n              value={ email }\n              onChange={ this.handleChange }\n            />\n          </label>\n          <Link to=\"/game\">\n            <button\n              data-testid=\"btn-play\"\n              type=\"button\"\n              disabled={ disable }\n              onClick={ () => {\n                this.getToken();\n                this.setPlayerData();\n              } }\n            >\n              Jogar\n            </button>\n          </Link>\n          <SettingsButton />\n        </form>\n      </div>\n    );\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => ({\n  getDataFromApi: (data) => dispatch(fetchToken(data)),\n  userNameEmail: (info) => dispatch(actionUserInfo(info)),\n});\n\nconst mapStateToProps = (state) => ({\n  userInfo: state.userReducer.info,\n});\n\nLogin.propTypes = {\n  getDataFromApi: PropTypes.func.isRequired,\n  userInfo: PropTypes.objectOf(PropTypes.object).isRequired,\n  userNameEmail: PropTypes.func.isRequired,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Login);\n","import React from 'react';\n\nclass Settings extends React.Component {\n  render() {\n    return (\n      <h1 data-testid=\"settings-title\">Tela de configurações</h1>\n    );\n  }\n}\n\nexport default Settings;\n","import PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport md5 from 'crypto-js/md5';\nimport './header.css';\n\nclass Header extends Component {\n  render() {\n    const { email, name } = this.props;\n    const { player: { score } } = JSON.parse(localStorage.getItem('state'));\n    return (\n      <header>\n        <img\n          src={ `https://www.gravatar.com/avatar/${md5(email).toString()}` }\n          data-testid=\"header-profile-picture\"\n          alt={ `Name:${name}` }\n        />\n        <h2 data-testid=\"header-player-name\">\n          <span className=\"user\">User:</span>\n          { name }\n        </h2>\n        <span data-testid=\"header-score\" className=\"score\">\n          <span className=\"score-text\">Placar:</span>\n          {score}\n        </span>\n      </header>\n    );\n  }\n}\n\nHeader.propTypes = {\n  email: PropTypes.string,\n  name: PropTypes.string,\n}.isRequired;\n\nconst mapStateToProps = (state) => ({\n  email: state.userInfosReducer.email,\n  name: state.userInfosReducer.name,\n});\n\nexport default connect(mapStateToProps, null)(Header);\n","import React, { Component } from 'react';\nimport './timer.css';\n\nclass Timer extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      seconds: 30,\n    };\n    this.count = this.count.bind(this);\n  }\n\n  componentDidMount() {\n    this.count();\n  }\n\n  count() {\n    const sec = 1000;\n    const interval = setInterval(() => {\n      const { seconds } = this.state;\n      this.setState({\n        seconds: seconds - 1,\n      });\n      if (seconds === 1) {\n        clearInterval(interval);\n        this.setState({\n          seconds: 'Time\\'s Up',\n        });\n      }\n    }, sec);\n  }\n\n  render() {\n    const { seconds } = this.state;\n    return (\n      <div className=\"timer\">\n        <p>Timer</p>\n        <span>\n          {\n            seconds\n          }\n        </span>\n      </div>\n    );\n  }\n}\n\nexport default Timer;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nclass UniqueButton extends Component {\n  render() {\n    const { className, onClick, innerText, disabled } = this.props;\n    return (\n      <button\n        className={ className }\n        disabled={ disabled }\n        type=\"button\"\n        data-testid={ className }\n        id={ className }\n        onClick={ onClick }\n      >\n        { innerText }\n      </button>\n    );\n  }\n}\n\nUniqueButton.propTypes = {\n  className: PropTypes.string.isRequired,\n  onClick: PropTypes.func.isRequired,\n  innerText: PropTypes.string.isRequired,\n  disabled: PropTypes.bool,\n};\n\nUniqueButton.defaultProps = {\n  disabled: false,\n};\n\nexport default UniqueButton;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nclass Button extends Component {\n  render() {\n    const { className, onClick, innerText, key, dataTestId } = this.props;\n    return (\n      <button\n        className={ className }\n        type=\"button\"\n        key={ key }\n        data-testid={ dataTestId }\n        name={ className }\n        onClick={ onClick }\n      >\n        { innerText }\n      </button>\n    );\n  }\n}\n\nButton.propTypes = {\n  className: PropTypes.string.isRequired,\n  onClick: PropTypes.func.isRequired,\n  innerText: PropTypes.string.isRequired,\n  key: PropTypes.number.isRequired,\n  dataTestId: PropTypes.string.isRequired,\n};\n\nexport default Button;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Redirect } from 'react-router-dom';\nimport UniqueButton from './UniqueButton';\nimport Button from './Button';\nimport './questioninfo.css';\n\nclass QuestionInfo extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      index: 0,\n    };\n\n    this.changeColorsAnswer = this.changeColorsAnswer.bind(this);\n    this.changeButtonVisibility = this.changeButtonVisibility.bind(this);\n    this.changeQuestions = this.changeQuestions.bind(this);\n    this.resetQuestions = this.resetQuestions.bind(this);\n  }\n\n  changeButtonVisibility() {\n    const buttonNextQuestion = document.getElementsByClassName('btn-next')[0];\n    buttonNextQuestion.classList.add('visible');\n  }\n\n  changeColorsAnswer() {\n    const correct = document.getElementById('correct-answer');\n    const incorrect = document.getElementsByName('incorrect-answer');\n    incorrect.forEach((question) => { question.className += ' questionWrong'; });\n    correct.className += ' questionCorrect';\n  }\n\n  changeQuestions() {\n    this.setState((p) => ({ index: p.index + 1 }));\n  }\n\n  resetQuestions() {\n    const correct = document.getElementById('correct-answer');\n    const incorrect = document.getElementsByName('incorrect-answer');\n    incorrect.forEach((question) => question.classList.remove('questionWrong'));\n    correct.classList.remove('questionCorrect');\n  }\n\n  sumUserPoints() {\n    const basePoints = 10;\n    const { timer, questions } = this.props;\n    const { index } = this.state;\n    const difficultyMultiplier = () => {\n      if (questions[index].difficulty === 'easy') {\n        return 1;\n      }\n      if (questions[index].difficulty === 'medium') {\n        return 2;\n      }\n      if (questions[index].difficulty === 'hard') {\n        const hardMultiplier = 3;\n        return hardMultiplier;\n      }\n    };\n    const points = basePoints + (timer * difficultyMultiplier());\n    const locals = JSON.parse(localStorage.getItem('state'));\n    localStorage.setItem('state', JSON.stringify({\n      player: {\n        ...locals.player,\n        assertions:\n        locals.player.assertions + 1,\n        score: locals.player.score + points },\n    }));\n  }\n\n  renderQuestions() {\n    const { questions } = this.props;\n    const { index } = this.state;\n    const { question } = questions[index];\n    const fixedQuestion = question\n      .replace(/&quot;/gi, '')\n      .replace(/&#039;/gi, '')\n      .replace(/&eacute/gi, '')\n      .replace(/&amp/gi, '');\n    return fixedQuestion;\n  }\n\n  render() {\n    const { index } = this.state;\n    const { questions, disabled } = this.props;\n    const finalQuestion = 5;\n    if (index === finalQuestion) return <Redirect to=\"/feedback\" />;\n    return (\n      <div className=\"question-container\">\n        <p className=\"question-category\" data-testid=\"question-category\">\n          <span className=\"category\">Category:</span>\n          {`${questions[index].category}`}\n        </p>\n        <p data-testid=\"question-text\" className=\"question-text\">\n          <span className=\"question\">Question:</span>\n          {`${this.renderQuestions()}`}\n        </p>\n        <UniqueButton\n          disabled={ disabled }\n          className=\"correct-answer\"\n          onClick={ () => {\n            this.changeButtonVisibility();\n            this.changeColorsAnswer();\n            this.sumUserPoints();\n          } }\n          innerText={ questions[index].correct_answer }\n        />\n        {questions[index].incorrect_answers.map((incorrect, i) => (\n          <Button\n            className=\"incorrect-answer\"\n            key={ i }\n            dataTestId={ `wrong-answer-${i}` }\n            onClick={ () => {\n              this.changeButtonVisibility();\n              this.changeColorsAnswer();\n            } }\n            innerText={ incorrect }\n          />\n        ))}\n        <UniqueButton\n          className=\"btn-next\"\n          innerText=\"PRÓXIMA\"\n          onClick={ () => {\n            this.changeQuestions();\n            this.resetQuestions();\n          } }\n        />\n      </div>\n    );\n  }\n}\n\nQuestionInfo.propTypes = {\n  questions: PropTypes.arrayOf(PropTypes.object).isRequired,\n  disabled: PropTypes.bool,\n  timer: PropTypes.number.isRequired,\n};\n\nQuestionInfo.defaultProps = {\n  disabled: false,\n};\n\nexport default QuestionInfo;\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport Timer from './Timer';\nimport QuestionInfo from './QuestionInfo';\nimport './question.css';\n\nclass Question extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      seconds: 30,\n      disabled: false,\n    };\n\n    this.count = this.count.bind(this);\n  }\n\n  componentDidMount() {\n    this.count();\n  }\n\n  count() {\n    const sec = 1000;\n    const interval = setInterval(() => {\n      const { seconds } = this.state;\n      this.setState({\n        seconds: seconds - 1,\n      });\n      if (seconds === 1) {\n        clearInterval(interval);\n        this.setState({\n          seconds: 'Time\\'s Up',\n          disabled: true,\n        });\n      }\n    }, sec);\n  }\n\n  render() {\n    const { disabled, seconds } = this.state;\n    const { questions } = this.props;\n    return (\n      <div className=\"container\">\n        <Timer />\n        { !questions.length\n          ? null\n          : (\n            <QuestionInfo\n              questions={ questions }\n              disabled={ disabled }\n              timer={ seconds }\n              count={ this.count }\n            />\n          )}\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  questions: state.questionsReducer.questions,\n});\n\nQuestion.propTypes = {\n  questions: PropTypes.arrayOf(PropTypes.object).isRequired,\n};\n\nexport default connect(mapStateToProps)(Question);\n","import React, { Component } from 'react';\nimport Header from '../components/Header';\nimport Question from '../components/Question';\n\nclass Game extends Component {\n  render() {\n    return (\n      <div>\n        <Header />\n        <Question />\n      </div>\n    );\n  }\n}\n\nexport default Game;\n","import React from 'react';\nimport md5 from 'crypto-js/md5';\nimport PropTypes from 'prop-types';\nimport './feedback.css';\n\nclass FeedBack extends React.Component {\n  constructor() {\n    super();\n    this.playAgain = this.playAgain.bind(this);\n    this.goToRanking = this.goToRanking.bind(this);\n  }\n\n  componentDidMount() {\n    const { player: { name, email, score } } = JSON.parse(localStorage.getItem('state'));\n    const playerImage = `https://www.gravatar.com/avatar/${md5(email).toString()}`;\n\n    const newRanking = {\n      playerImage,\n      score,\n      name,\n    };\n\n    const ranking = JSON.parse(localStorage.getItem('ranking'));\n\n    if (ranking) {\n      localStorage\n        .setItem('ranking',\n          JSON.stringify([...ranking, newRanking]));\n    } else {\n      localStorage.setItem('ranking', JSON.stringify([newRanking]));\n    }\n  }\n\n  playAgain() {\n    const { history } = this.props;\n    history.push('/ProjectTriviaRedux');\n  }\n\n  feedBackMessage() {\n    const { player: { assertions } } = JSON.parse(localStorage.getItem('state'));\n    const minAssertions = 3;\n    return assertions < minAssertions ? 'Podia ser melhor...' : 'Mandou bem!';\n  }\n\n  goToRanking() {\n    const { history } = this.props;\n    history.push('/ranking');\n  }\n\n  render() {\n    const {\n      player:\n      {\n        name,\n        assertions,\n        gravatarEmail,\n        score,\n      } } = JSON.parse(localStorage.getItem('state'));\n    return (\n      <div className=\"feedback-container\">\n        <header>\n          <img\n            src={ `https://www.gravatar.com/avatar/${md5(gravatarEmail).toString()}` }\n            data-testid=\"header-profile-picture\"\n            alt={ `Name:${name}` }\n          />\n          <h3 data-testid=\"header-player-name\">\n            <span className=\"player\">Jogador:</span>\n            {name}\n          </h3>\n          <p className=\"total-score\" data-testid=\"header-score\">{score}</p>\n        </header>\n        <div className=\"results\">\n          <h2>Resultados</h2>\n          <p className=\"assertions\">\n            Número de acertos:\n            <span data-testid=\"feedback-total-question\">{assertions}</span>\n          </p>\n          <p className=\"points\">\n            Pontuação:\n            <span data-testid=\"feedback-total-score\">{score}</span>\n          </p>\n          <p data-testid=\"feedback-text\">{this.feedBackMessage()}</p>\n          <div className=\"buttons-container\">\n            <button type=\"button\" data-testid=\"btn-play-again\" onClick={ this.playAgain }>\n              Jogar Novamente\n            </button>\n            <button type=\"button\" data-testid=\"btn-ranking\" onClick={ this.goToRanking }>\n              Ver Ranking\n            </button>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nFeedBack.propTypes = {\n  history: PropTypes.func,\n}.isRequired;\n\nexport default FeedBack;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './ranking.css';\n\nclass Ranking extends React.Component {\n  constructor() {\n    super();\n    this.playAgain = this.playAgain.bind(this);\n  }\n\n  playAgain() {\n    const { history } = this.props;\n    history.push('/ProjectTriviaRedux');\n  }\n\n  render() {\n    const ranking = JSON.parse(localStorage.getItem('ranking'));\n\n    return (\n      <div className=\"ranking\">\n        <p className=\"title\" data-testid=\"ranking-title\">\n          Ranking\n        </p>\n        <div className=\"players-container\">\n          {ranking\n            .sort((a, b) => b.score - a.score)\n            .map((rank, index) => (\n              <div className=\"players\" key={ index }>\n                <img src={ rank.playerImage } alt=\"player\" />\n                <h3 data-testid={ `player-name-${index}` }>{rank.name}</h3>\n                <p data-test-id={ `player-score-${index}` }>\n                  Pontuação:\n                  <span className=\"score\">{rank.score}</span>\n                </p>\n              </div>\n            ))}\n        </div>\n        <button\n          type=\"button\"\n          data-testid=\"btn-go-home\"\n          onClick={ this.playAgain }\n        >\n          Voltar ao inicio\n        </button>\n      </div>\n    );\n  }\n}\n\nRanking.propTypes = {\n  history: PropTypes.func,\n}.isRequired;\n\nexport default Ranking;\n","import React from 'react';\nimport './App.css';\nimport { Route, Switch } from 'react-router-dom';\nimport Login from './pages/Login';\nimport Settings from './pages/Settings';\nimport Game from './pages/Game';\nimport FeedBack from './pages/Feedback';\nimport Ranking from './pages/Ranking';\n\nexport default function App() {\n  return (\n    <Switch>\n      <Route exact path=\"/ProjectTriviaRedux\" component={ Login } />\n      <Route exact path=\"/settings\" component={ Settings } />\n      <Route exact path=\"/game\" component={ Game } />\n      <Route exact path=\"/feedback\" component={ FeedBack } />\n      <Route exact path=\"/ranking\" component={ Ranking } />\n    </Switch>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {\n  REQUEST_TOKEN,\n  REQUEST_TOKEN_SUCCESS,\n  REQUEST_TOKEN_ERROR,\n} from '../actions';\n\nconst INITIAL_STATE = {\n  info: {},\n  isFetching: true,\n  error: '',\n};\n\nconst userReducer = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n  case REQUEST_TOKEN:\n    return {\n      ...state,\n      isFetching: true,\n    };\n  case REQUEST_TOKEN_SUCCESS:\n    return {\n      ...state,\n      info: action.payload,\n      isFething: false,\n    };\n  case REQUEST_TOKEN_ERROR:\n    return {\n      ...state,\n      error: action.payload,\n      isFetching: false,\n    };\n  default:\n    return state;\n  }\n};\n\nexport default userReducer;\n","import { USERINFOS } from '../actions/index';\n\nconst INITIAL_STATE = {\n  user: {\n    name: '',\n    email: '',\n  },\n};\n\nconst userInfosReducer = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n  case USERINFOS:\n    return { ...state, name: action.name, emial: action.email };\n  default: return state;\n  }\n};\n\nexport default userInfosReducer;\n","import {\n  REQUEST_QUESTIONS,\n  REQUEST_QUESTIONS_SUCCESS,\n  REQUEST_QUESTIONS_ERROR,\n} from '../actions';\n\nconst INITIAL_STATE = {\n  questions: [],\n  isFetching: true,\n  error: '',\n};\n\nconst questionsReducer = (state = INITIAL_STATE, action) => {\n  console.log(action);\n  switch (action.type) {\n  case REQUEST_QUESTIONS:\n    return {\n      ...state,\n      isFetching: true,\n    };\n  case REQUEST_QUESTIONS_SUCCESS:\n    return {\n      ...state,\n      questions: action.payload,\n      isFetching: false,\n    };\n  case REQUEST_QUESTIONS_ERROR:\n    return {\n      ...state,\n      isFetching: false,\n      error: action.payload,\n    };\n  default:\n    return state;\n  }\n};\n\nexport default questionsReducer;\n","import { combineReducers } from 'redux';\nimport userReducer from './player';\nimport userInfosReducer from './userInfo';\nimport questionsReducer from './questions';\n\nconst rootReducer = combineReducers({ userReducer, userInfosReducer, questionsReducer });\n\nexport default rootReducer;\n","import { createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport rootReducer from '../reducers';\n\nconst store = createStore(rootReducer, composeWithDevTools(applyMiddleware(thunk)));\n\nexport default store;\n\nif (window.Cypress) {\n  window.store = store;\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport store from './redux/store';\n\nReactDOM.render(\n  <Provider store={ store }>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </Provider>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}